/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/~__root'
import { Route as SettingsImport } from './routes/~settings'
import { Route as IndexImport } from './routes/~index'
import { Route as RepositoriesRepositoryIdFileOwnerImport } from './routes/~repositories/~$repositoryId/~file-owner'
import { Route as RepositoriesRepositoryIdCodeownersImport } from './routes/~repositories/~$repositoryId/~codeowners'
import { Route as RepositoriesRepositoryIdAllOwnersImport } from './routes/~repositories/~$repositoryId/~all-owners'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RepositoriesRepositoryIdFileOwnerRoute =
  RepositoriesRepositoryIdFileOwnerImport.update({
    path: '/repositories/$repositoryId/file-owner',
    getParentRoute: () => rootRoute,
  } as any)

const RepositoriesRepositoryIdCodeownersRoute =
  RepositoriesRepositoryIdCodeownersImport.update({
    path: '/repositories/$repositoryId/codeowners',
    getParentRoute: () => rootRoute,
  } as any)

const RepositoriesRepositoryIdAllOwnersRoute =
  RepositoriesRepositoryIdAllOwnersImport.update({
    path: '/repositories/$repositoryId/all-owners',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/repositories/$repositoryId/all-owners': {
      id: '/repositories/$repositoryId/all-owners'
      path: '/repositories/$repositoryId/all-owners'
      fullPath: '/repositories/$repositoryId/all-owners'
      preLoaderRoute: typeof RepositoriesRepositoryIdAllOwnersImport
      parentRoute: typeof rootRoute
    }
    '/repositories/$repositoryId/codeowners': {
      id: '/repositories/$repositoryId/codeowners'
      path: '/repositories/$repositoryId/codeowners'
      fullPath: '/repositories/$repositoryId/codeowners'
      preLoaderRoute: typeof RepositoriesRepositoryIdCodeownersImport
      parentRoute: typeof rootRoute
    }
    '/repositories/$repositoryId/file-owner': {
      id: '/repositories/$repositoryId/file-owner'
      path: '/repositories/$repositoryId/file-owner'
      fullPath: '/repositories/$repositoryId/file-owner'
      preLoaderRoute: typeof RepositoriesRepositoryIdFileOwnerImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  SettingsRoute,
  RepositoriesRepositoryIdAllOwnersRoute,
  RepositoriesRepositoryIdCodeownersRoute,
  RepositoriesRepositoryIdFileOwnerRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/settings",
        "/repositories/$repositoryId/all-owners",
        "/repositories/$repositoryId/codeowners",
        "/repositories/$repositoryId/file-owner"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/settings": {
      "filePath": "~settings.tsx"
    },
    "/repositories/$repositoryId/all-owners": {
      "filePath": "~repositories/~$repositoryId/~all-owners.tsx"
    },
    "/repositories/$repositoryId/codeowners": {
      "filePath": "~repositories/~$repositoryId/~codeowners.tsx"
    },
    "/repositories/$repositoryId/file-owner": {
      "filePath": "~repositories/~$repositoryId/~file-owner.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
